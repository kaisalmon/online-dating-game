{"version":3,"sources":["assets/phone-wrapper.png","components/phone-wrapper.tsx","components/header.tsx","components/match-thread.tsx","game/match-thread.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","PHONE_WRAPPER_STYLE","transform","height","width","backgroundImage","overlay","backgroundSize","backgroundPosition","backgroundRepeat","display","justifyContent","position","PHONE_SCREEN","flexGrow","flexShrink","flexBasis","overflow","margin","PhoneWrapper","children","style","HEADER_STYLE","padding","background","fontWeight","boxShadow","fontSize","MESSAGE_THREAD_STYLES","boxSizing","FROM_PLAYER_CHAT_BUBBLE_STYLE","backgroundColor","color","borderRadius","FROM_MATCH_CHAT_BUBBLE_STYLE","FROM_MATCH_TAIL","borderColor","borderStyle","borderWidth","clip","right","bottom","FROM_PLAYER_TAIL","left","ChatMessageComp","chatMessage","text","fromPlayer","textAlign","className","ChoiceComp","choice","matchThread","match","messages","name","transitionName","transitionEnterTimeout","map","message","getCurrentChoices","MatchThread","conversationStory","this","json","require","story","Story","canContinue","Continue","push","id","length","firstChoice","applyChoice","canSpeak","currentChoices","index","indexOf","ChooseChoiceIndex","Alex","traits","App","props","state","setInterval","tick","setState","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5ff1a46d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/phone-wrapper.6aa6c63b.png\";","import React, {ReactNodeArray, ReactNode} from 'react';\r\nimport overlay from '../assets/phone-wrapper.png';\r\nimport CSS from 'csstype';\r\n\r\nconst PHONE_WRAPPER_STYLE:CSS.Properties ={\r\n    transform: \"translateX(calc(50vw - 50%))\",\r\n    height: \"100vh\",\r\n    width: `${100 * 700/1200}vh`,\r\n    backgroundImage: `url(${overlay})`,\r\n    backgroundSize: \"contain\",\r\n    backgroundPosition: \"center\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    display: \"flex\",\r\n    justifyContent:  \"space-between\",\r\n    position: 'relative',\r\n}\r\nconst PHONE_SCREEN:CSS.Properties = {\r\n    flexGrow: 1,\r\n    flexShrink: 1,\r\n    flexBasis: \"auto\",\r\n    overflow: \"auto\",\r\n    margin: \"10vh 7vh\",\r\n}\r\n\r\nexport default function PhoneWrapper({children}:{children:ReactNode}) {\r\n  return (\r\n    <div style={PHONE_WRAPPER_STYLE}>\r\n        <div style={PHONE_SCREEN}>\r\n            {children}\r\n        </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport CSS from \"csstype\";\r\nconst HEADER_STYLE : CSS.Properties = {\r\n    width: \"100%\",\r\n    padding: \"1em 3em 1em \",\r\n    margin: 0,\r\n    background: \"white\",\r\n    fontWeight: \"bold\",\r\n    boxShadow: \"0 2px 2px rgba(0,0,0,0.3)\",\r\n    fontSize: \"115%\",\r\n}\r\nexport default function ({children}:{children:React.ReactNodeArray|React.ReactNode}){\r\n    return <div style={HEADER_STYLE}>\r\n        {children}\r\n    </div>\r\n}","import React from 'react';\r\nimport MatchThread  from \"../game/match-thread\";\r\nimport {Choice} from 'inkjs/engine/Choice';\r\nimport CSS from \"csstype\";\r\nimport ChatMessage from \"../game/chat-message\";\r\nimport Header from \"./header\";\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\nimport \"../styles/transitions.css\"\r\n\r\nconst matchColor = \"#2095FE\";\r\nconst fromPlayerColor = \"lightgray\";\r\n\r\nconst MESSAGE_THREAD_STYLES:CSS.Properties ={\r\n    boxSizing: \"border-box\",\r\n    background: \"white\",\r\n    height: \"100%\",\r\n}\r\nconst FROM_PLAYER_CHAT_BUBBLE_STYLE:CSS.Properties = {\r\n    backgroundColor: matchColor,\r\n    color: \"#fff\",\r\n    display: \"inline-block\",\r\n    borderRadius: \"20px 20px 20px 20px\",\r\n    padding: \"10px 20px\",\r\n    margin: \"0.6em\",\r\n    position: \"relative\",\r\n}\r\nconst FROM_MATCH_CHAT_BUBBLE_STYLE:CSS.Properties = {\r\n    ...FROM_PLAYER_CHAT_BUBBLE_STYLE,\r\n    backgroundColor: fromPlayerColor,\r\n    color: \"#222\",\r\n}\r\nconst FROM_MATCH_TAIL : CSS.Properties = {\r\n    borderColor: matchColor,\r\n    borderRadius: \"50% 50% 50% 50%\",\r\n    borderStyle: \"solid\",\r\n    borderWidth: \"0 0.7em\",\r\n    clip: \"rect(1em, 1em, 2em, 0)\",\r\n    height: \"2em\",\r\n    position: \"absolute\",\r\n    right: \"calc(0.3vh - 2em)\",\r\n    bottom: 0,\r\n    width: \"40px\",\r\n}\r\nconst FROM_PLAYER_TAIL : CSS.Properties = {\r\n    ...FROM_MATCH_TAIL,\r\n    borderColor: fromPlayerColor,\r\n    left: \"calc(0.3vh - 2em)\",\r\n    transform:\" rotateY(180deg)\"\r\n}\r\nfunction ChatMessageComp({chatMessage}:{chatMessage:ChatMessage}){\r\n    const {text, fromPlayer} = chatMessage;\r\n    const style = fromPlayer ?\r\n        FROM_PLAYER_CHAT_BUBBLE_STYLE : FROM_MATCH_CHAT_BUBBLE_STYLE;\r\n    return <div style={{position: \"relative\", textAlign:fromPlayer ? \"right\" : \"left\"}}>\r\n        <div style={style} className={fromPlayer ? \"fromPlayer\" : \"fromMatch\"}>\r\n            <div style={!fromPlayer ? FROM_PLAYER_TAIL : FROM_MATCH_TAIL}/>\r\n            {text}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nfunction ChoiceComp({choice}:{choice:Choice}){\r\n    return <pre>\r\n        {choice.text}?\r\n    </pre>\r\n}\r\n\r\nexport default function ({matchThread}:{matchThread:MatchThread}) {\r\n    const {match, messages} = matchThread;\r\n    return <div style={MESSAGE_THREAD_STYLES}>\r\n        <Header>{match.name}</Header>\r\n        <div style={{padding:\"2em\"}}>\r\n            <ReactCSSTransitionGroup\r\n              transitionName=\"item\"\r\n              transitionEnterTimeout={2000}>\r\n                 {messages.map(message =>\r\n                       <ChatMessageComp chatMessage={message}/>\r\n                 )}\r\n            </ReactCSSTransitionGroup>\r\n            <ReactCSSTransitionGroup\r\n              transitionName=\"item\"\r\n              transitionEnterTimeout={2000}>\r\n                 {matchThread.getCurrentChoices().map(choice =>\r\n                       <ChoiceComp choice={choice}/>\r\n                 )}\r\n            </ReactCSSTransitionGroup>\r\n        </div>\r\n    </div>\r\n}","import Match from \"./match\";\r\nimport ChatMessage from \"./chat-message\";\r\nimport {Story} from 'inkjs/engine/Story';\r\nimport {Choice} from 'inkjs/engine/Choice';\r\n\r\n\r\n\r\nexport default class MatchThread{\r\n    match: Match;\r\n    messages: ChatMessage[];\r\n    conversationStory: Story;\r\n\r\n\r\n    constructor(match:Match) {\r\n        this.match = match;\r\n        this.messages = [];\r\n        const json = require(\"../conversations/ink.json\");\r\n        const story = new Story(json);\r\n        this.conversationStory = story;\r\n    }\r\n    tick(){\r\n        if(this.conversationStory.canContinue){\r\n            const text = this.conversationStory.Continue();\r\n            if(!text) return;\r\n            this.messages.push({\r\n                id:this.messages.length,\r\n                fromPlayer: false,\r\n                text\r\n            })\r\n        }else {\r\n            const [firstChoice] = this.getCurrentChoices();\r\n            if(firstChoice){\r\n                this.applyChoice(firstChoice);\r\n            }\r\n        }\r\n\r\n    }\r\n    getCurrentChoices():Choice[]{\r\n        if(!this.canSpeak()){\r\n            return []\r\n        }\r\n        return this.conversationStory.currentChoices;\r\n    }\r\n    canSpeak():boolean{\r\n        return !this.conversationStory.canContinue\r\n    }\r\n    applyChoice(choice: Choice|number){\r\n        const index = typeof choice === \"number\"\r\n            ? choice\r\n            : this.getCurrentChoices().indexOf(choice)\r\n        this.conversationStory.ChooseChoiceIndex(index);\r\n        const text = this.conversationStory.Continue();\r\n        if(text) {\r\n            this.messages.push({\r\n                id:this.messages.length,\r\n                fromPlayer: true,\r\n                text\r\n            })\r\n        }\r\n    }\r\n\r\n}","import React from 'react';\nimport PhoneWrapper from \"./components/phone-wrapper\";\nimport MatchThreadComp from \"./components/match-thread\";\nimport MatchThread from \"./game/match-thread\";\nimport GameState from \"./game/game-state\";\n\nconst TICK_LENGTH= 1000;\n\nconst Alex = {name: \"Alex\", traits:[] };\n\nclass App extends React.Component<{}, GameState>{\n    constructor(props:{}) {\n        super(props);\n        this.state = {\n            matchThread: new MatchThread(Alex)\n        }\n    }\n    componentDidMount() {\n        setInterval(()=>{\n            const {matchThread} = this.state;\n            matchThread.tick();\n            this.setState({matchThread})\n        }, TICK_LENGTH)\n    }\n    render()\n    {\n        const {matchThread} = this.state;\n        return (\n            <div className=\"App\">\n                <PhoneWrapper>\n                    <MatchThreadComp matchThread={matchThread}/>\n                </PhoneWrapper>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
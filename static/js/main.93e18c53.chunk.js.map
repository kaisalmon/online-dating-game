{"version":3,"sources":["assets/phone-wrapper.png","components/phone-wrapper.tsx","components/header.tsx","components/match-thread.tsx","game/match-thread.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","PHONE_WRAPPER_STYLE","transform","height","width","backgroundImage","overlay","backgroundSize","backgroundPosition","backgroundRepeat","display","justifyContent","position","PHONE_SCREEN","flexGrow","flexShrink","flexBasis","overflow","margin","borderRadius","PhoneWrapper","children","style","HEADER_STYLE","padding","background","fontWeight","boxShadow","fontSize","zIndex","MESSAGE_THREAD_STYLES","boxSizing","flexDirection","MESSAGE_AREA_STYLE","FROM_PLAYER_CHAT_BUBBLE_STYLE","backgroundColor","color","textAlign","FROM_MATCH_CHAT_BUBBLE_STYLE","FROM_MATCH_TAIL","borderColor","borderStyle","borderWidth","clip","right","bottom","FROM_PLAYER_TAIL","left","TypingDots","className","StageDirection","fontStyle","ChatMessageComp","chatMessage","fromPlayer","isStageDirection","text","key","id","isBeingTyped","ChoiceComp","choice","onChoiceSelected","onClick","MessageThread","el","lastHeight","this","scrollToBottom","scrollHeight","scrollTo","behavior","top","props","matchThread","onChange","match","choices","getCurrentChoices","messages","getMessages","name","ref","transitionName","transitionEnterTimeout","transitionLeaveTimeout","map","message","reply","applyChoice","React","Component","MatchThread","sentMessages","conversationStory","matchIsTyping","timeBetweenMatchMessages","timeToTypeMessage","timeToReply","timeToStartConvo","timeSinceLastMatchMessage","timeSinceMessageStartedBeingTyped","timeSinceLastPlayerMessage","json","require","story","Story","deltaTime","canContinue","currentChoices","length","Continue","Error","sendMatchMessage","timeToStartTyping","getTimeToStartTyping","getTimeSinceLastMessage","didMatchSendLastMessage","push","currentTags","find","tag","canSpeak","index","indexOf","console","error","ChooseChoiceIndex","Alex","traits","App","state","setInterval","tick","setState","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.93e18c53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/phone-wrapper.6aa6c63b.png\";","import React, {ReactNodeArray, ReactNode} from 'react';\r\nimport overlay from '../assets/phone-wrapper.png';\r\nimport CSS from 'csstype';\r\n\r\nconst PHONE_WRAPPER_STYLE:CSS.Properties ={\r\n    transform: \"translateX(calc(50vw - 50%))\",\r\n    height: \"100vh\",\r\n    width: `${100 * 700/1200}vh`,\r\n    backgroundImage: `url(${overlay})`,\r\n    backgroundSize: \"contain\",\r\n    backgroundPosition: \"center\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    display: \"flex\",\r\n    justifyContent:  \"space-between\",\r\n    position: 'relative',\r\n}\r\nconst PHONE_SCREEN:CSS.Properties = {\r\n    flexGrow: 1,\r\n    flexShrink: 1,\r\n    flexBasis: \"auto\",\r\n    overflow: \"auto\",\r\n    margin: \"10vh 7vh\",\r\n    borderRadius: \"2vh\",\r\n}\r\n\r\nexport default function PhoneWrapper({children}:{children:ReactNode}) {\r\n  return (\r\n    <div style={PHONE_WRAPPER_STYLE}>\r\n        <div style={PHONE_SCREEN}>\r\n            {children}\r\n        </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport CSS from \"csstype\";\r\nconst HEADER_STYLE : CSS.Properties = {\r\n    width: \"100%\",\r\n    padding: \"1em 3em 1em \",\r\n    margin: 0,\r\n    background: \"white\",\r\n    fontWeight: \"bold\",\r\n    boxShadow: \"0 2px 2px rgba(0,0,0,0.3)\",\r\n    fontSize: \"115%\",\r\n    zIndex: 1,\r\n}\r\nexport default function ({children}:{children:React.ReactNodeArray|React.ReactNode}){\r\n    return <div style={HEADER_STYLE}>\r\n        {children}\r\n    </div>\r\n}","import React, {ReactNode} from 'react';\r\nimport MatchThread  from \"../game/match-thread\";\r\nimport {Choice} from 'inkjs/engine/Choice';\r\nimport CSS from \"csstype\";\r\nimport ChatMessage from \"../game/chat-message\";\r\nimport Header from \"./header\";\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\nimport \"../styles/style.css\"\r\n\r\nconst matchColor = \"#2095FE\";\r\nconst fromPlayerColor = \"lightgray\";\r\n\r\nconst MESSAGE_THREAD_STYLES:CSS.Properties ={\r\n    boxSizing: \"border-box\",\r\n    background: \"red\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n}\r\n\r\nconst MESSAGE_AREA_STYLE:CSS.Properties = {\r\n    padding:\"2em\",\r\n    background:\"white\",\r\n    flexGrow: 1,\r\n    overflow: \"auto\",\r\n}\r\nconst FROM_PLAYER_CHAT_BUBBLE_STYLE:CSS.Properties = {\r\n    backgroundColor: matchColor,\r\n    color: \"#fff\",\r\n    display: \"inline-block\",\r\n    borderRadius: \"20px 20px 20px 20px\",\r\n    padding: \"10px 20px\",\r\n    margin: \"0.6em\",\r\n    position: \"relative\",\r\n    textAlign: \"left\",\r\n}\r\nconst FROM_MATCH_CHAT_BUBBLE_STYLE:CSS.Properties = {\r\n    ...FROM_PLAYER_CHAT_BUBBLE_STYLE,\r\n    backgroundColor: fromPlayerColor,\r\n    color: \"#222\",\r\n}\r\nconst FROM_MATCH_TAIL : CSS.Properties = {\r\n    borderColor: matchColor,\r\n    borderRadius: \"50% 50% 50% 50%\",\r\n    borderStyle: \"solid\",\r\n    borderWidth: \"0 0.7em\",\r\n    clip: \"rect(1em, 1em, 2em, 0)\",\r\n    height: \"2em\",\r\n    position: \"absolute\",\r\n    right: \"calc(0.3vh - 2em)\",\r\n    bottom: 0,\r\n    width: \"40px\",\r\n}\r\nconst FROM_PLAYER_TAIL : CSS.Properties = {\r\n    ...FROM_MATCH_TAIL,\r\n    borderColor: fromPlayerColor,\r\n    left: \"calc(0.3vh - 2em)\",\r\n    transform:\" rotateY(180deg)\"\r\n}\r\n\r\nfunction TypingDots(){\r\n    return <div className=\"loadingContainer\">\r\n        <div className=\"ball1\"></div>\r\n        <div className=\"ball2\"></div>\r\n        <div className=\"ball3\"></div>\r\n    </div>\r\n}\r\n\r\nfunction StageDirection({children}:{children:ReactNode}){\r\n    return <div style={{\r\n        background: \"linear-gradient(to right, rgba(0,0,0,0) 0%,rgba(0,0,0,0.2) 15%,rgba(0,0,0,0.2) 85%,rgba(0,0,0,0) 100%)\",\r\n        textAlign: \"center\",\r\n        color: \"#333\",\r\n        padding: \"0.5em\",\r\n        fontStyle: \"italic\",\r\n     }}>{children}</div>\r\n}\r\n\r\nfunction ChatMessageComp({chatMessage}:{chatMessage:ChatMessage}){\r\n    const {fromPlayer} = chatMessage;\r\n    if(chatMessage.isStageDirection){\r\n        return <StageDirection>{chatMessage.text}</StageDirection>\r\n    }\r\n    const style = fromPlayer ?\r\n        FROM_PLAYER_CHAT_BUBBLE_STYLE : FROM_MATCH_CHAT_BUBBLE_STYLE;\r\n    return <div style={{position: \"relative\", textAlign:fromPlayer ? \"right\" : \"left\"}}  key={chatMessage.id}>\r\n        <div style={style} className={fromPlayer ? \"fromPlayer\" : \"fromMatch\"}>\r\n            <div style={!fromPlayer ? FROM_PLAYER_TAIL : FROM_MATCH_TAIL}/>\r\n            {chatMessage.isBeingTyped ? <TypingDots/> : chatMessage.text}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nfunction ChoiceComp({choice, onChoiceSelected}:{choice:Choice, onChoiceSelected:(choice:Choice)=>void}){\r\n    return <pre onClick={()=>onChoiceSelected(choice)} key={choice.text} className=\"playerChoice\">\r\n        {choice.text}\r\n    </pre>\r\n}\r\n\r\ntype MessageThreadProps = { matchThread: MatchThread, onChange: () => void }\r\n\r\nexport default class MessageThread extends React.Component<MessageThreadProps> {\r\n    el: HTMLDivElement| null = null;\r\n    lastHeight: number =  0;\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n   scrollToBottom() {\r\n        if(!this.el) return;\r\n        const height = this.el.scrollHeight;\r\n        if(this.lastHeight === height) return;\r\n        this.lastHeight = height;\r\n       this.el.scrollTo({\r\n           behavior:\"smooth\",\r\n           top: height,\r\n       })\r\n    }\r\n\r\n    render() {\r\n        const {matchThread, onChange} = this.props;\r\n        const {match} = matchThread;\r\n        const choices = matchThread.getCurrentChoices();\r\n        const messages = matchThread.getMessages();\r\n        return <div style={MESSAGE_THREAD_STYLES}>\r\n            <Header>{match.name}</Header>\r\n            <div style={MESSAGE_AREA_STYLE} ref={el => { this.el = el; }}>\r\n                <ReactCSSTransitionGroup\r\n                    transitionName=\"item\"\r\n                    transitionEnterTimeout={600}\r\n                    transitionLeaveTimeout={300}>\r\n                    {messages.map(message =>\r\n                        <ChatMessageComp key={message.id} chatMessage={message}/>\r\n                    )}\r\n                </ReactCSSTransitionGroup>\r\n                <ReactCSSTransitionGroup\r\n                    transitionName=\"item\"\r\n                    transitionEnterTimeout={600}\r\n                    transitionLeaveTimeout={300}>\r\n                    {choices.map(choice =>\r\n                        <ChoiceComp\r\n                            choice={choice}\r\n                            onChoiceSelected={(reply) => {\r\n                                matchThread.applyChoice(reply);\r\n                                onChange();\r\n                            }}\r\n                        />\r\n                    )}\r\n                </ReactCSSTransitionGroup>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import Match from \"./match\";\r\nimport ChatMessage, {SentChatMessage} from \"./chat-message\";\r\nimport {Story} from 'inkjs/engine/Story';\r\nimport {Choice} from 'inkjs/engine/Choice';\r\n\r\n\r\nexport default class MatchThread{\r\n    match: Match;\r\n    sentMessages: SentChatMessage[];\r\n    conversationStory: Story;\r\n    matchIsTyping: boolean = false;\r\n    timeBetweenMatchMessages: number = 1750;\r\n    timeToTypeMessage:number = 1500;\r\n    timeToReply: number = 7000;\r\n    timeToStartConvo: number = 2000;\r\n\r\n    timeSinceLastMatchMessage:number = 0;\r\n    timeSinceMessageStartedBeingTyped:number = 0;\r\n    timeSinceLastPlayerMessage: number = 0;\r\n\r\n    constructor(match:Match) {\r\n        this.match = match;\r\n        this.sentMessages = [];\r\n        const json = require(\"../conversations/ink.json\");\r\n        const story = new Story(json);\r\n        this.conversationStory = story;\r\n    }\r\n    tick(deltaTime:number){\r\n        this.timeSinceLastMatchMessage += deltaTime;\r\n        this.timeSinceMessageStartedBeingTyped += deltaTime;\r\n        this.timeSinceLastPlayerMessage += deltaTime;\r\n        if(!this.conversationStory.canContinue || this.conversationStory.currentChoices.length > 0) return;\r\n        if(this.matchIsTyping){\r\n            if(this.timeSinceMessageStartedBeingTyped < this.timeToTypeMessage) return;\r\n            const text = this.conversationStory.Continue();\r\n            if(text === null) throw new Error(\"Null message\")\r\n            this.sendMatchMessage({text: text});\r\n        }else{\r\n            const timeToStartTyping = this.getTimeToStartTyping() - this.timeToTypeMessage;\r\n            const timeSinceLastMessage =  this.getTimeSinceLastMessage();\r\n            if(timeSinceLastMessage < timeToStartTyping ) return;\r\n            this.timeSinceMessageStartedBeingTyped = 0;\r\n            this.matchIsTyping = true;\r\n        }\r\n    }\r\n\r\n    getTimeToStartTyping(){\r\n        if(this.sentMessages.length === 0) return this.timeToStartConvo;\r\n        return (this.didMatchSendLastMessage() ?\r\n                this.timeBetweenMatchMessages\r\n                : this.timeToReply\r\n            )\r\n    }\r\n\r\n    getTimeSinceLastMessage(){\r\n        return this.didMatchSendLastMessage() ? this.timeSinceLastMatchMessage : this.timeSinceLastPlayerMessage;\r\n    }\r\n\r\n    sendMatchMessage({text}:{text:string}){\r\n        this.timeSinceLastMatchMessage = 0;\r\n        this.matchIsTyping = false;\r\n        this.sentMessages.push({\r\n            id:this.sentMessages.length,\r\n            fromPlayer: false,\r\n            isStageDirection: !!this.conversationStory.currentTags?.find(tag=>tag===\"stage_direction\"),\r\n            text,\r\n        })\r\n    }\r\n    getCurrentChoices():Choice[]{\r\n        if(!this.canSpeak()) return []\r\n        return this.conversationStory.currentChoices;\r\n    }\r\n    canSpeak():boolean{\r\n        return !this.conversationStory.canContinue && !this.matchIsTyping;\r\n    }\r\n    getMessages():ChatMessage[]{\r\n        if(this.matchIsTyping) return [...this.sentMessages, {isBeingTyped: true, id: -3 * this.sentMessages.length - 100}]\r\n        return this.sentMessages;\r\n    }\r\n    didMatchSendLastMessage():boolean{\r\n        const index = this.sentMessages.length -1;\r\n        if(index === -1) return false;\r\n        return !this.sentMessages[index].fromPlayer;\r\n    }\r\n    applyChoice(choice: Choice|number){\r\n        this.timeSinceLastPlayerMessage = 0;\r\n        const index = typeof choice === \"number\"\r\n            ? choice\r\n            : this.getCurrentChoices().indexOf(choice)\r\n        if(index === -1) {\r\n        console.error(choice, index, this.conversationStory)\r\n            throw new Error(\"Invalid Index\")\r\n        }\r\n        this.conversationStory.ChooseChoiceIndex(index);\r\n        const text = this.conversationStory.Continue();\r\n        if(text) {\r\n            this.sentMessages.push({\r\n                id:this.sentMessages.length,\r\n                fromPlayer: true,\r\n                text\r\n            })\r\n        }\r\n    }\r\n\r\n}","import React from 'react';\nimport PhoneWrapper from \"./components/phone-wrapper\";\nimport MatchThreadComp from \"./components/match-thread\";\nimport MatchThread from \"./game/match-thread\";\nimport GameState from \"./game/game-state\";\n\nconst TICK_LENGTH= 100;\n\nconst Alex = {name: \"Alex\", traits:[] };\n\nclass App extends React.Component<{}, GameState>{\n    constructor(props:{}) {\n        super(props);\n        this.state = {\n            matchThread: new MatchThread(Alex)\n        }\n    }\n    componentDidMount() {\n        setInterval(()=>{\n            const {matchThread} = this.state;\n            matchThread.tick(TICK_LENGTH);\n            this.setState({matchThread})\n        }, TICK_LENGTH)\n    }\n    onChange(){\n        const {matchThread} = this.state;\n        this.setState({matchThread})\n    }\n    render()\n    {\n        const {matchThread} = this.state;\n        return (\n            <div className=\"App\">\n                <PhoneWrapper>\n                    <MatchThreadComp\n                        matchThread={matchThread}\n                        onChange={()=>this.onChange()}\n                    />\n                </PhoneWrapper>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}